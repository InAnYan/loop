%import common.INT
%import common.WS
%import common.CPP_COMMENT -> LINE_COMMENT
%import common.C_COMMENT -> MULTI_LINE_COMMENT
%import common.CNAME -> IDENTIFIER
%import common.ESCAPED_STRING -> STRING

%ignore WS
%ignore LINE_COMMENT
%ignore MULTI_LINE_COMMENT

module: decl*

?decl: var_decl
     | func_decl
     | stmt

var_decl: "var" IDENTIFIER ["=" expr] _eos
func_decl: "function" IDENTIFIER "(" arg_list ")" block_stmt

arg_list: [IDENTIFIER ("," IDENTIFIER)*]

?stmt: print_stmt
     | block_stmt
     | if_stmt
     | while_stmt
     | expr_stmt

print_stmt: "print" expr _eos
block_stmt: "{" decl* "}"
if_stmt: "if" expr block_stmt ["else" block_stmt]
while_stmt: "while" expr block_stmt
expr_stmt: expr _eos

_eos: ";"+

?expr: assignment

?assignment: logical_or
           | logical_or "=" assignment -> assignment

?logical_or: logical_and
           | logical_or "||" logical_and -> logical_or

?logical_and: equality
            | logical_and "&&" equality -> logical_and

?equality: comparison
         | equality "==" comparison -> eq
         | equality "!=" comparison -> neq

?comparison: sum
           | comparison ">" sum  -> gt
           | comparison "<" sum  -> lt
           | comparison ">=" sum -> gte
           | comparison "<=" sum -> lte

?sum: product
    | sum "+" product -> add
    | sum "-" product -> sub

?product: unary
        | product "*" unary -> mul
        | product "/" unary -> div

?unary: "+" unary -> add_unary
      | "-" unary -> neg
      | "!" unary -> logical_not
      | primary

?primary: atom
        | atom "(" expr_list ")" -> call

expr_list: [expr ("," expr)*]

?atom: INT
     | TRUE
     | FALSE
     | NULL
     | STRING
     | IDENTIFIER -> var_expr
     | "(" expr ")"

TRUE: "true"
FALSE: "false"
NULL: "null"