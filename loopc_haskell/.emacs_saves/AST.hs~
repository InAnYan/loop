module AST where

data File = File String String

data SourcePosition = SourcePosition File Int

data Module = Module [Stmt]

data Stmt = Stmt SourcePosition StmtKind
data Expr = Expr SourcePosition ExprKind

data StmtKind = VarDecl Bool String (Maybe Expr)
          | FuncDecl Bool Func
          | ClassDecl Bool String [Func]
          | ExprStmt Expr
          | ReturnStmt (Maybe Expr)
          | IfStmt Expr Stmt (Maybe Stmt)
          | WhileStmt Expr Stmt
          | PrintStmt Expr
          | ImportAsStmt String String
          | ImportFromStmt [String] String

data Func = Func String [String] Stmt

data ExprKind = BinaryExpr BinaryOp Expr Expr
              | UnaryExpr UnaryOp Expr
              | CallExpr Expr [Expr]
              | VarExpr String
              | IntegerExpr Int
              | BoolExpr Bool
              | NullExpr
              | StringExpr String
              | GetItemExpr Expr [Expr]
              | GetAttrExpr Expr String

data BinaryOp = Add | Subtract | Multiply | Divide
  | Greater | Less | GreaterEqual | LessEqual
  | Equal | NotEqual
  | LogicalAnd | LogicalOr

data UnaryOp = Plus | Negate | LogicalNot

